package JavaSE.OO.guanjianzi;
/**
 * static关键字
 * 	static变量：静态变量，静态变量在类加载的时候初始化，不需要创建对象，内存就开辟了
 * 				静态变量存储在方法区内存中，访问的时候不用创建对象，直接使用类名.变量名访问
 * 	static方法：静态方法，通常采用类名.方法名()访问
 * 	static代码块：静态代码块
 * 什么时候成员变量声明为静态变量：所有对象都有这个属性，且这个属性的值是不变的
 * 什么时候成员变量声明为实例变量：所有对象都有这个属性，但是这个属性的值会随对象变化而变化
 * 所有静态的数据都可以采用类名.，也可以采用引用.的方式访问，通常采用类名.的方式访问
 * 
 * 方法什么时候定义为静态
 * 	方法描述的是动作，当所有的对象执行这个动作的时候，最终产生的影响是一样的，
 * 	那么这个动作已经不再属于某一个对象的动作，可以将这个动作提升为类级别的动作
 * 	大多数方法都定义为实例方法，一般一个行为或者一个动作在发生的时候，都需要对象的参与。
 * 	但是也有例外，例如：大多数工具类中的方法都是静态方法
 * 
 * 静态方法中无法直接访问实例变量和实例方法
 * 	
 * 使用static关键字来定义“静态代码块”
 * 	1、语法格式：
 * 		static{
 * 			java语句
 * 		}
 * 	2、静态代码块在类加载时执行，并且只执行一次
 * 	3、静态代码块在一个类中可以编写多个，并且遵循自上而下的顺序依次执行
 * 	4、静态代码块的作用：
 * 		和具体需求有关，例如要求在类加载的时候执行代码完成日志的记录
 * 		这段记录日志的代码就可以编写到静态代码块当中，完成日志记录
 * 		
 * 		静态代码快是java提供的一个类加载时刻，若希望在此时刻执行一段特殊的程序，这段程序可以直接方法代码块中
 * 	5、通常在静态代码块中完成预备工作，先完成数据的准备工具，例如：初始化连接池，解析配置文件
 * 
 * 实例代码块：语法格式
 * 	{
 * 		Java语句
 * 	}
 * 	1、实例代码块可以编写多个，也是遵循自上而下的顺序依次执行
 * 	2、实例代码块在构造方法执行之前执行，构造方法执行一次，实例代码块对应执行一次
 * 	3、实例代码块也是java语言为程序员准备的一个特殊时机，这个特殊时机称为对象初始化时机
 * 
 */
public class StaticTest {
	//构造函数
	public StaticTest(){
		System.out.println("构造方法执行");
	}
	//静态代码块
	static {
		System.out.println("类加载1");
	}
	static {
		System.out.println("类加载2");
	}
	//实例代码块
	{
		System.out.println("实例代码块");
	}
	
	//实例变量
	int i;
	//实例方法
	public  void doSome() {
		
	}
	public static void main(String[] args) {
		System.out.println("main begin");
		new StaticTest();
		//静态方法中无法直接访问实例变量和实例方法，没有对象，也没有this
		//创建对象
		StaticTest s=new StaticTest();
		s.doSome();
		System.out.println(s.i);
	}
}
