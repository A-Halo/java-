1、面向对象知识点
	C语言是纯面向过程的，c++是半面向对象的，java是纯面向对象的
	面向过程和面向对象
	面向对象的三大特征
		封装，继承，多态
		面向对象分析：OOA analyze
		面向对象设计：OOD design
		面向对象编程：OOP program
	类和对象的概念
		什么是类？
			抽象，现实中不存在，一种概念模板，某一类事物，例如：学生
		什么是对象？
			具象，现实中具体的东西，例如：张三，李四
		先有类，再有对象，通过类造对象
		类--【实例化】->对象
		对象又被称为实例/instance
		对象--【抽象】->类
		类描述的是对象的共同特征，要访问这个特征，必须要先创建对象，通过对象访问
		共同特征：状态：属性，动作：方法
		类{
	属性：描述对象的状态信息
	方法：描述对象的动作信息
  }
	类的定义
		语法结构：
			[修饰符列表] class 类名{
      }
		Public class student{
		属性通常用变量的方式来定义，在类体中，方法体外定义的变量
		称为成员变量，成员变量没赋值，系统会赋默认值
      Int no;
      String name；
      }

引用数据类型：
String.class SUN提供的
System.class SUN提供的
Student.class 自定义的
2、jvm内存讲解
	1、Jvm(java虚拟机)主要包括三块内存空间，分别是：栈内存，堆内存，方法区内存，
	堆内存和方法区内存各有一个，一个线程一个栈内存。
	2、方法调用时，该方法需要的内存空间在栈内存中分配，称为压栈，方法执行结束后，该方法所属的内存空间释放，称为弹栈。
	3、栈中主要存储的是方法体中的局部变量。
	4、方法的代码片段以及整个类的代码片段都被存储在方法区内存中，在类加时，这些代码片段会载入。
	5、在程序执行过程中使用new运算符创建的java对象，存储在堆内存中，对象内部有实例变量，所以实例变量存储在堆内存中
	6、变量分配：
	局部变量【方法体中声明】
	成员变量【方法体外声明】
		实例变量【修饰符无static】
		静态变量【修饰符有static】
	7、静态变量存储在方法区内存中
	8、三块内存空间中变化最频繁的是栈内存，最先有数据的是方法区内存，垃圾回收器主要针对的是堆内存
	9、垃圾回收器【自动垃圾回收机制，GC机制】什么时候考虑将java对象的内存回收？
		当堆内存当中的java对象成为垃圾数据时，会被回收
		什么时候堆内存中的java对象会变成垃圾呢？
    	没有更多的对象指向它的时候
		这个对象无法被访问，因为访问只能通过引用的方式访问
3、面向对象三大特征：
   封装，继承，多态
	封装：
	封装的好处：
	1.封装之后，对于这个事物来说，看不到这个事物复杂的一面，只能看到该事物简单的一面。复杂性封装，对外只提供简单的操作入口，例如：照相机就具有很好的封装性，实现原理复杂，但是操作简单便捷
	2.封装之后会形成真正的对象，真正的独立体
	3.封装就意味着以后的程序可以重复使用，并且这个事物适应性比较强，在任何场合都可以使用
	4.封装之后对于事物本身，提高了安全性。【安全级别高】
	  封装步骤
	1.所有属性私有化,用private关键字，private表示私有的，修饰的所有数据只能在本类中使用
	2.对外提供简单操作入口：提供两个公开的方法，分别是set方法和get方法
    访问属性两种方式
  	1.读取 调用get方法 
  	2.修改 调用set方法
  get方法命名规范(读取有返回值)
  public int getAge(){
  		return age;
  }
  set方法命名规范(修改无返回值)
  public void getAge(int a){
  		age = a;
  }
 setter and getter方法没有static关键字
 有static关键字调用：类名.方法名(实参)
 无static关键字调用：引用.方法名(实参)


4、构造方法讲解：
	关于java中的构造方法：
 	1.构造方法又被称为构造函数/构造器/Constructor
 	2.构造方法语法结构：
  	[修饰符列表] 构造方法名/类名（形式参数列表）{
  		构造方法体；
  	}
 
 	普通方法语法结构
 	修饰符列表 返回值类型 方法名（形式参数列表）{
 		方法体；
 	}
 	3.对比：
 	构造方法无返回值类型，也不能写void，只要有void就是普通方法
 	构造方法方法名必须和类名保持一致
 
 	4.构造方法的作用
 		1.创建对象
 		2.创建对象的同时，初始化实例变量的内存空间，给实例变量赋默认值
 
	5.构造方法调用，名字后面带括号的一定是方法名
 	new 构造方法名(实参)
 	6.普通方法调用：
 	有static：类名.方法名(实参)
 	无static：引用.方法名(实参)
 	7.访问实例变量的语法格式：
		读取数据：引用.变量名
		修改数据：引用.变量名=值
 	构造方法调用之后有返回值，但是return语句不需要写，构造方法结束后java程序自动返回返回值，并且返回值类型是构造方法所在类的类型
 	为什么构造方法语法中无返回值，因为返回的就是本身类的类型，不需要写返回值
 	构造方法支持方法重载
 	系统会自动默认提供当前类的构造方法
 	当我们提供了构造方法，则系统不再提供默认的构造方法
 	开发中建议手动为当前类提供无参数的构造方法
5、对象和引用：
	对象和引用的概念：
		对象：目前在使用new运算符在堆内存中开辟的内存空间称为对象
		引用：是一个变量，不一定是局部变量，可能是成员变量
	所有访问实例相关的数据，都需要通过“引用.”的方式访问，只有通过引用才能找到对象
	只有一个空的引用，访问对象的实例相关的数据会出现空指针异常
	例子：
	class Student{
	Computer com;//com是一个引用【实例变量】
	public static void dosome(){
		Computer cc;//cc是一个引用【局部变量】
}
}
6、this关键字

7、static关键字

8、方法覆盖

9、final关键字

10、java语言中的包机制
    作用：方便代码管理
    包名命名规范：
      公司域名倒序+项目名+模块名+功能名;
    在java源程序的第一行编写package语句
    package只能编写一个语句，语法格式为：package 包名;
    包名要求全部小写，包名也是标识符，遵守标识符命名规则
11、访问控制权限修饰符：
    1、访问控制权限修饰符来控制元素的访问范围
    2、访问控制权限修饰符包括：
       public：表示公开的，在任何位置都可以访问
       protected：表示同包下，子类中可以访问
       缺省/default：表示同包下可以访问
       private：表示私有的，只能在本类中访问
    3、访问控制权限修饰符可以修饰类，变量，方法....
    4、当某个数据只希望子类使用，使用protected修饰符
    5、修饰符的范围：private<缺省<protected<public
    6、类只能使用public 或 缺省修饰【内部类除外】
	
	
	
